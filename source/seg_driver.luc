/*

   A module to drive the seven segment displays.

   This module reads from a RAM and drives the output accordingly.

   

   Requires counter component

   Requires simple_dual_ram component

   Requires seg_rom components

   

   To use: 

   Connect clk to system clock.

   Connect rst to a reset source.

   

   mem_data to RAM read data port

   mem_addr to RAM read address port

   mem_rclk to RAM read clock port

   done to game logic (or wherever)

   

   data, dclk, srst, sclk to appropriate i/o pins

*/



module seg_driver (

    input clk,  // clock (Rising edge -> 1 bit sent out on any one of the data lines)

    input rst,  // reset (Assert to reset the state and start writing out again)

    

    input mem_data[4], // 4 bit wide tile

    output mem_addr[$clog2(56)], // address 56 tiles

    output mem_rclk, // memory read clock

    output done, // finished writing memory to output 

    

    output data[8], // data lines

    output dclk[8], // data clock lines

    output srst[8], // storage register reset lines

    output sclk[8] // storage clock lines

    

  ) {

  

  sig int_data;

  sig int_dclk;

  sig int_sclk;

  

  // Hardcoded memory access pattern

  const MEM_ADDR_PATTERN = {

     6d6,  6d5,  6d4,  6d3,  6d2,  6d1,  6d0,

    6d13, 6d12, 6d11, 6d10,  6d9,  6d8,  6d7,

    6d20, 6d19, 6d18, 6d17, 6d16, 6d15, 6d14,

    6d27, 6d26, 6d25, 6d24, 6d23, 6d22, 6d21,

    6d34, 6d33, 6d32, 6d31, 6d30, 6d29, 6d28,

    6d41, 6d40, 6d39, 6d38, 6d37, 6d36, 6d35,

    6d48, 6d47, 6d46, 6d45, 6d44, 6d43, 6d42,

    6d55, 6d54, 6d53, 6d52, 6d51, 6d50, 6d49 

  };

  

  // This is the counter that controls bit output.

  // It has 4 bits of division so its frequency is 12.5MHz

  // The counter is 4 bits long. The bits can be broken down like this:

  // Bit 0: SCK 

  // Bit 3-1: Bit position in data word

  counter ctr_bit (

    #SIZE(4), #DIV(4), #UP(1),

     .clk(clk), .rst(rst)

  );

  

  // This is wired in the always block later

  sig ctr_data_bit[3];

  

  // This is the counter that controls byte output.

  // It has 8 bits of division to line up with the end of the bit counter

  // The counter is 

  // Used to index into MEM_ADDR_PATTERN

  counter ctr_byte (

    #SIZE(6), #DIV(8), #TOP(55), #UP(1),

    .clk(clk), .rst(rst)

  );

  

  // This is a counter that determines which memory column we are on.

  // The top is the max number of columns (zero-based)

  // It has 8 bits of division to align with the end of bit counter

  counter ctr_column (

    #SIZE(4), #DIV(8), #TOP(6), #UP(1),

    .clk(clk), .rst(rst)

  );

  

  sig ctr_mem_column[4];

  

  

  // Pulse sclk[0] when column counter rolls over first time

  // Pulse sclk[1] when it does for the second time

  

  fsm col_state (#INIT(NORMAL), .clk(clk), .rst(rst)) = {

    NORMAL, ON_6, ON_0

  };

  

  sig ctr_row_clk;

  

  // No division: You'll see why

  counter ctr_row (

    #SIZE(4), #DIV(0), #TOP(7), #UP(1),

    .clk(ctr_row_clk), .rst(rst)

  );

  

  sig active_row[4];



  

  // State of the driver.

  fsm driver_state (#INIT(FIRST_WRITE), .clk(clk), .rst(rst)) = {

    FIRST_WRITE, ABOUT_TO_FINISH, DONE

  };

  

  // State of RAM read clock

  fsm ram_rclk_state (#INIT(BEGIN_READ), .clk(clk), .rst(rst)) = {

    LOW, HIGH, BEGIN_READ

  };

      

  // Connect rom address to RAM data

  seg_rom rom (.address(mem_data));

  





  always {

    // Reset all shift registers when component is reset 

    // Inversion required as srst is active low

    srst = 8x{~rst};

    

    done = 0;

    int_sclk = 0;

    mem_rclk = 0;



    

    int_dclk = ctr_bit.value[0];



    ctr_data_bit = ctr_bit.value[3:1];

    ctr_mem_column = ctr_column.value;

    active_row = ctr_row.value;

    

    case(ram_rclk_state.q) {

      ram_rclk_state.BEGIN_READ:

        // Rising edge: Pull data out of memory

        mem_rclk = 1;

        ram_rclk_state.d = ram_rclk_state.HIGH;  

      ram_rclk_state.HIGH:

        mem_rclk = 0;

        ram_rclk_state.d = ram_rclk_state.LOW;

      ram_rclk_state.LOW:

        mem_rclk = 0;

        // Monitor the ctr_bit for when the byte is over 

        // and the last bit is being sent

        if (ctr_data_bit == 3d7 && int_dclk == 1) {

          ram_rclk_state.d = ram_rclk_state.BEGIN_READ;

        }

    }

    

    case(col_state.q) {

      col_state.NORMAL:

        if (ctr_mem_column == 4d6) {

          col_state.d = col_state.ON_6;

        }

      col_state.ON_6:

        // If column is 6, when roll over to 0, put the internal sclk high

        // Also advance the row counter

        if (ctr_mem_column == 4d0) {

          col_state.d = col_state.ON_0;

          int_sclk = 1;

          ctr_row_clk = 1;

        }

      col_state.ON_0:

        // When we leave 0, put sclk low to complete a pulse

        if (ctr_mem_column == 4d1) {

          col_state.d = col_state.NORMAL;

          int_sclk = 0;

          ctr_row_clk = 0;

        }

    }

    

    // Which data bit to send out now?

    int_data = rom.pattern[ctr_data_bit];

    

    mem_addr = MEM_ADDR_PATTERN[ctr_byte.value];

    

    data[active_row] = int_data;

    dclk[active_row] = int_dclk;

    sclk[active_row] = int_sclk;



    case(driver_state.q) {

      driver_state.FIRST_WRITE:

        done = 0;

        // About to finish...

        if (ctr_byte.value == 6d55) {

          driver_state.d = driver_state.ABOUT_TO_FINISH;

        }

      driver_state.ABOUT_TO_FINISH:

        done = 0;

        if (ctr_byte.value == 6d00) {

          driver_state.d = driver_state.DONE;

        }

      driver_state.DONE:

        done = 1;

        // Don't leave this state until reset

    }

  }

}