module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy  ,     // AVR RX buffer full
    
    input row_button[8],  //button lines
    output col_button[7],  //button lines
    input flag[1],
    
    output data[8], // data lines
    output dclk[8], // data clock lines
    output srst[8], // storage register reset lines
    output sclk[8] // storage clock lines 

  ) {
  
  sig rst;                  // Global reset signal
  
  sig comp_rst;    // Component reset signal (connect to any one of these reset signals and set pulser fsm)
  
  sig btn_rst;     // Button decoder reset signal
  sig mf_logic_rst;      // Minefield logic reset signal
  sig winning_condition_rst;      // Goal test reset signal
  sig advance_map_rst;      // Map counter reset signal
  
  sig mf_state_rst;      // Minefield state regfile reset signal
  sig mem_write_counter_rst;       // Memory writing counter reset
  
  sig advance_map_clk;      // Map counter clock
    
  // ALU signals
  sig alu_16_a[16];
  sig alu_16_b[16];
  sig alu_16_alu[16];
  sig alufn[6]; 
  
  // Active mine map ROM's data (1 bit wide)
  sig mine_map;
  
  // Active mine map ROM's address
  sig mine_addr[6];

  sig mf_reg_wen;      // Minefield state regfile write enable signal
  sig flagged;      // flagged button depressed signal
  
  sig btn_pressed;
  sig win_con_done;      // Goal test logic didn't find a winning board
  sig win_con_win;      // Goal test logic found a winning board
  
  sig memcpy_from[64][4];    // Copy constant array to display regfile
  
  const SHOW_WIN = $reverse({
    4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h0,
    4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h0,
    4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h0,
    4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h0,
    4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h0,
    4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h0,
    4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h0,
    4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h9, 4h0
  });
  
  const SHOW_LOSE = $reverse({
    4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4h0,
    4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4h0,
    4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4h0,
    4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4h0,
    4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4h0,
    4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4h0,
    4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4h0,
    4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4hF, 4h0
  });


  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst){
      reg_file display_reg_file (#SIZE(64), #WIDTH(4));
      seg_driver seg_driver;
      

      fsm pulser(#INIT(HIGH)) = {HIGH, LOW};
      fsm game(#INIT(POLL)) = {IDLE, POLL, CALCULATE, GOAL_CHECK, LOST, WIN, MEMCPY, MEMCPY_END};
    }

      counter mem_write_counter (
        #SIZE($clog2(64)), #DIV(2), #TOP(63), #UP(1),
        .rst(mem_write_counter_rst)
      );
        // Button components - conditioner and decoder

          button_conditioner button_conditioner;

    button_decoder button_decoder (.rst(btn_rst));
      
        // Minefield logic and state regfile 

            minefield_logic minefield_logic (.rst(mf_logic_rst));

      reg_file minefield_state_register (#SIZE(64), #WIDTH(2), .rst(mf_state_rst));
    
  
  // Goal test logic 
    .rst(winning_condition_rst){
  
    winning_condition winning_condition;
    }

    }
  
  
  
  
  
  
  
  // current map counter (advanced on every cycle of advance_map_clk)
  .clk(advance_map_clk){
    .rst(advance_map_rst){
  
    counter ctr (#SIZE(2), #TOP(2), #UP(1)); 
      
    }
  }
    
 
  alu16 alu16;
  minefield_rom minefield_rom;

  
  
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
       
    // Disconnect minefield rom data
    mine_map = 0;
    
    comp_rst = 0;
    
    // Instantitaion
    
    // Disconnect map counter signals
    advance_map_clk = 0;
    advance_map_rst = 0;
    
    mem_write_counter_rst = 0;
    
    memcpy_from = SHOW_LOSE;
    
    // Connect goal test logic data input to regfile and minefield rom outputs
    winning_condition.mfstateval = minefield_state_register.rdata;
    winning_condition.mfromval = minefield_rom.mine_map[ctr.value];
   
    // Connect goal test output signals
    win_con_done = winning_condition.done;
    win_con_win = winning_condition.win;

    
    //button_conditioner
    button_conditioner.in = flag;
    flagged = button_conditioner.out;
    
    
    //Display Register File
    // Connect read ports to display logic 
    // and write ports to game logic
    display_reg_file.raddr = seg_driver.mem_addr;
    display_reg_file.wen = minefield_logic.displaywriteenable;
    display_reg_file.wdata = minefield_logic.displaywritedata;
    display_reg_file.waddr = button_decoder.addr;
    
    seg_driver.mem_data = display_reg_file.rdata;

    
    //Game Logic
    // ALU connection
    alu_16_a = minefield_logic.alua;
    alu_16_b = minefield_logic.alub;
    alufn = minefield_logic.alufn;
    minefield_logic.aluresult = alu16.alu;
    
    // Minefield state regfile
    mf_reg_wen = minefield_logic.registerwriteenable;
    minefield_logic.minefieldromvalue = mine_map;
    minefield_logic.minefieldstatevalue = minefield_state_register.rdata;

    // Minefield logic: Button address
    minefield_logic.buttonaddress = button_decoder.addr;
        
    minefield_logic.flagbtn = flagged;
    
    // 7-segment driver ports
    data = seg_driver.data;
    dclk = seg_driver.dclk;
    srst = seg_driver.srst;
    sclk = seg_driver.sclk;
    
    
    // Button Decoder
    button_decoder.row_input = row_button;
    col_button = button_decoder.col_drive;
    btn_pressed = button_decoder.button_pressed;
    
    // ALU
    alu16.a = alu_16_a;
    alu16.b = alu_16_b;
    alu16.alufn = alufn;
    alu_16_alu = alu16.alu;   // Is this used?
    
    // Minefield ROM
    mine_map = minefield_rom.mine_map[ctr.value];
    mine_addr = minefield_logic.minefieldromaddress;
    minefield_rom.address = mine_addr;

 
        
    // Minefield State Register
    minefield_state_register.raddr = minefield_logic.minefieldstateregister;
    minefield_state_register.waddr = minefield_logic.minefieldstateregister;
    minefield_state_register.wen = minefield_logic.registerwriteenable;
    minefield_state_register.wdata = minefield_logic.registerwritedata;
    
    
    
    led[4:2]=minefield_logic.debug;
    
    
    
    ///////////FSM///////////
    
    case (pulser.q){
    
      pulser.HIGH:
      
        comp_rst = 1;

        pulser.d = pulser.LOW;
    
      pulser.LOW:
      
        comp_rst = 0;
    }
    
    
    case (game.q){
    
      game.IDLE :
        led[7:5]=3d0;
        mf_logic_rst = 1;
        btn_rst = 1;
        mf_state_rst = 1;
        
        

      
        if (btn_pressed){
        
          game.d = game.POLL;
        }
      
      game.POLL:
        // Entry point
        // Reset and begin clocking button decoder
        btn_rst = 0;
        
        // Possibly came from a state where state regfile is being reset.
        // Disconnect it from reset line
        mf_state_rst = 0;
        mf_logic_rst = 0;
        
        led[7:5]=3d1;

        if (btn_pressed){
          // Stop the btn_clk - the button address should be preserved
          // If it's not, stick a pipeline in it
          btn_rst = 0;       
          game.d = game.CALCULATE;
        }
        
      game.CALCULATE:
        // Reset and begin clocking minefield logic
        mf_logic_rst = 0;
        
        // Prepare to reset goal test 
        winning_condition_rst = 1;
        
        led[7:5]=3d2;
        
        // Connect minefield logic to mine rom
        minefield_logic.minefieldromvalue = mine_map;
        mine_addr = minefield_logic.minefieldromaddress;
        
        // Connect minefield logic to state memory
        minefield_state_register.wen = minefield_logic.registerwriteenable;
        minefield_state_register.waddr = minefield_logic.registerwriteaddress;
        minefield_state_register.wdata = minefield_logic.registerwritedata;
        minefield_state_register.raddr = minefield_logic.minefieldstateregister;
        minefield_logic.minefieldstatevalue = minefield_state_register.rdata;
        
        // And disconnect goal checker
        winning_condition.mfromval = 0;
        winning_condition.mfstateval = 0;



        if (minefield_logic.done){
          // Done? Check if we won
          mf_logic_rst = 0;
          
          game.d = game.GOAL_CHECK;
        }
        
        if (minefield_logic.lost){
          // Blew ourselves up!
          // Should go high before logic.done
          mf_logic_rst = 0;
          
          game.d = game.LOST;
          
        }
        
      
      game.GOAL_CHECK:
              led[7:5]=3d3;

        winning_condition_rst = 0;
        
        // Connect goal checker
        mine_addr = winning_condition.mfromadrs;
        winning_condition.mfromval = mine_map;
        minefield_state_register.raddr = winning_condition.mfstateadrs;
        winning_condition.mfstateval = minefield_state_register.rdata;
        
        // And disconnect game logic 
        minefield_state_register.wen = 0;
        minefield_state_register.waddr = 0;
        minefield_state_register.wdata = 0;

        
        
        if (win_con_done){
          // Accept next input
          
          game.d = game.POLL; 
          
        } else {
        
          if ((ctr.value < 2d2) && win_con_win){
            // map counter is below b10 (Still have more fields to play)
            
            // Use the reset pulser to deliver a pulse on counter clock to advance it 
            advance_map_clk = comp_rst;
            pulser.d = pulser.HIGH;
            // advance_map_rst = 0;
            
            // Reset the game minefield_state_register as well
            mf_state_rst = 1;
                      
            game.d = game.POLL;
            } else {
          
              if ((ctr.value == 2d2) && win_con_win){
                // Out of minefields to give: player won the game
                game.d = game.WIN;
              }
              
          }
       }
      
      game.MEMCPY:
              led[7:5]=3d4;

        // Begin clocking mem_write_counter
        mem_write_counter_rst = comp_rst;
        pulser.d = pulser.HIGH;
        
        display_reg_file.wdata = memcpy_from[mem_write_counter.value];
        display_reg_file.wen = 1;
        display_reg_file.waddr = mem_write_counter.value;
        
        if (mem_write_counter.value == 63) {
          game.d = game.MEMCPY_END;
        }
      
      game.MEMCPY_END:
              led[7:5]=3d5;

        if (mem_write_counter.value == 6b0) {
          game.d = game.IDLE;
          display_reg_file.wdata = 0;
          display_reg_file.wen = 0;
          display_reg_file.waddr = 0;

        }
        
      game.LOST:
        led[7:5]=3d6;

        memcpy_from = SHOW_LOSE;
        game.d = game.MEMCPY;

      game.WIN:
              led[7:5]=3d7;

        memcpy_from = SHOW_WIN;
        game.d = game.MEMCPY;
     }     
   }
 }
